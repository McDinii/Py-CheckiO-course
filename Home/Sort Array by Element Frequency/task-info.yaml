type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def frequency_sort(items):
        di = dict()
        for i in items:
            di[i] = items.count(i)
        items = []
        def get_key(di, value):
            for k, v in di.items():
                if v == value:
                    return k
        for i in sorted(di.values(), reverse=True):
            j = i
            while j > 0:
                items.append(get_key(di,i))
                j -= 1
            del di[get_key(di,i)]
        return items


    if __name__ == '__main__':
        print("Example:")
        print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
        assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
        assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
        assert list(frequency_sort([])) == []
        assert list(frequency_sort([1])) == [1]
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  def frequency_sort(items):
      di = dict()
      for i in items:
          di[i] = items.count(i)
      items = []
      def get_key(di, value):
          for k, v in di.items():
              if v == value:
                  return k
      for i in sorted(di.values(), reverse=True):
          j = i
          while j > 0:
              items.append(get_key(di,i))
              j -= 1
          del di[get_key(di,i)]
      return items


  if __name__ == '__main__':
      print("Example:")
      print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
      assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
      assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
      assert list(frequency_sort([])) == []
      assert list(frequency_sort([1])) == [1]
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 5021107
